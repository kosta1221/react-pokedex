{"version":3,"sources":["utils.js","components/PokemonsOfTypeGrid.js","components/Pokemon.js","components/Suggestions.js","components/PokemonSection.js","components/CollectionSection.js","App.js","reportWebVitals.js","index.js"],"names":["URL","fetchPokemonData","data","setData","inputValue","setErrorMessage","setPokemonLoading","a","console","log","pokemonData","isFetching","axios","method","url","headers","response","message","fetchPokemonNames","setAllPokemonNames","pokemonNames","results","map","pokemon","name","fetchPokemonTypes","type","setPokemonsOfType","setTypeGridLoading","pokemonsOfType","catchPokemon","myCollection","setMyCollection","length","fetchMyCollection","fetchedCollection","releaseFromCollection","pokemonId","capitalizeFirstLetter","string","charAt","toUpperCase","slice","PokemonsOfTypeGrid","typeGridLoading","handleGridClick","event","pokemonName","target","getAttribute","color","height","width","className","i","sprites","src","alt","onMouseEnter","onMouseLeave","onClick","Pokemon","pokemonLoading","handleTypeClick","error","pokemonDataDivs","key","Array","isArray","push","other","dream_world","Suggestions","suggestions","setInputValue","handleSearchButtonClick","handleSuggestionClick","innerText","options","suggestion","PokemonSection","handleInputChange","searchSuggestions","searchButtonClickCount","setSearchButtonClickCount","id","onChange","placeholder","value","setPokemonData","CollectionSection","isCollectionDisplayed","setIscollectionDisplayed","viewCollectionButton","useRef","myCollectionDisplay","useEffect","current","style","display","handleRelease","handleCollectionPokemonClick","ref","pokemonid","App","useState","errorMessage","setSearchSuggestions","allPokemonNames","weight","types","errorDiv","window","addEventListener","document","querySelector","filter","includes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d0792b38.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst URL = `/api`;\r\n\r\nexport const fetchPokemonData = async (\r\n\tdata,\r\n\tsetData,\r\n\tinputValue,\r\n\tsetErrorMessage,\r\n\tsetPokemonLoading\r\n) => {\r\n\tconsole.log(\"trying to fetch...\");\r\n\tconsole.log(`${URL}/pokemon/${inputValue}`);\r\n\ttry {\r\n\t\tsetPokemonLoading(true);\r\n\r\n\t\tsetData({ pokemonData: data.pokemonData, isFetching: true });\r\n\t\tconst response = await axios({\r\n\t\t\tmethod: \"GET\",\r\n\t\t\turl: `${URL}/pokemon/${inputValue}`,\r\n\t\t\theaders: { \"Content-Type\": \"application/json\" },\r\n\t\t});\r\n\t\tsetData({ pokemonData: response.data, isFetching: false });\r\n\r\n\t\tsetPokemonLoading(false);\r\n\t} catch (e) {\r\n\t\tconsole.log(e);\r\n\t\tif (typeof e.response.data === \"string\") {\r\n\t\t\tsetErrorMessage(e.response.data);\r\n\t\t} else if (typeof e.response.data.message === \"string\") {\r\n\t\t\tsetErrorMessage(e.response.data.message);\r\n\t\t} else setErrorMessage(e.message);\r\n\r\n\t\tsetData({ pokemonData: data.pokemonData, isFetching: false });\r\n\r\n\t\tsetPokemonLoading(false);\r\n\t}\r\n};\r\n\r\nexport const fetchPokemonNames = async (setAllPokemonNames, inputValue, setErrorMessage) => {\r\n\tconsole.log(\"trying to fetch names...\");\r\n\tconsole.log(`${URL}/pokemon/${inputValue}`);\r\n\r\n\ttry {\r\n\t\tconst response = await axios({\r\n\t\t\tmethod: \"GET\",\r\n\t\t\turl: `${URL}/pokemon/${inputValue}`,\r\n\t\t\theaders: { \"Content-Type\": \"application/json\" },\r\n\t\t});\r\n\t\tconst pokemonNames = response.data.results.map((pokemon) => pokemon.name);\r\n\t\tsetAllPokemonNames(pokemonNames);\r\n\t} catch (e) {\r\n\t\tconsole.log(e);\r\n\t\tif (typeof e.response.data === \"string\") {\r\n\t\t\tsetErrorMessage(e.response.data);\r\n\t\t} else if (typeof e.response.data.message === \"string\") {\r\n\t\t\tsetErrorMessage(e.response.data.message);\r\n\t\t} else setErrorMessage(e.message);\r\n\t}\r\n};\r\n\r\nexport const fetchPokemonTypes = async (\r\n\ttype,\r\n\tsetPokemonsOfType,\r\n\tsetErrorMessage,\r\n\tsetTypeGridLoading\r\n) => {\r\n\tsetTypeGridLoading(true);\r\n\r\n\tconsole.log(`trying to fetch ${type} types...`);\r\n\tconsole.log(`${URL}/type/${type}`);\r\n\ttry {\r\n\t\tconst response = await axios({\r\n\t\t\tmethod: \"GET\",\r\n\t\t\turl: `${URL}/type/${type}`,\r\n\t\t\theaders: { \"Content-Type\": \"application/json\" },\r\n\t\t});\r\n\t\tconst pokemonsOfType = response.data;\r\n\t\tconsole.log(response.data);\r\n\t\tsetPokemonsOfType(pokemonsOfType);\r\n\r\n\t\tsetTypeGridLoading(false);\r\n\t} catch (e) {\r\n\t\tsetPokemonsOfType([]);\r\n\t\tconsole.log(e);\r\n\t\tif (typeof e.response.data === \"string\") {\r\n\t\t\tsetErrorMessage(e.response.data);\r\n\t\t} else if (typeof e.response.data.message === \"string\") {\r\n\t\t\tsetErrorMessage(e.response.data.message);\r\n\t\t} else setErrorMessage(e.message);\r\n\t\tsetTypeGridLoading(false);\r\n\t\tthrow e;\r\n\t}\r\n};\r\n\r\nexport const catchPokemon = async (pokemon, myCollection, setMyCollection, setErrorMessage) => {\r\n\tconsole.log(`trying to catch(post) ${pokemon.name}...`);\r\n\tconsole.log(`${URL}/collection/catch`);\r\n\ttry {\r\n\t\tconst response = await axios({\r\n\t\t\tmethod: \"POST\",\r\n\t\t\turl: `${URL}/collection/catch`,\r\n\t\t\theaders: { \"Content-Type\": \"application/json\" },\r\n\t\t\tdata: pokemon,\r\n\t\t});\r\n\t\tconsole.log(response.data[response.data.length - 1].name);\r\n\t\tconsole.log(response.data);\r\n\t\tsetMyCollection([...response.data]);\r\n\t} catch (e) {\r\n\t\tconsole.log(e);\r\n\t\tif (typeof e.response.data === \"string\") {\r\n\t\t\tsetErrorMessage(e.response.data);\r\n\t\t} else if (typeof e.response.data.message === \"string\") {\r\n\t\t\tsetErrorMessage(e.response.data.message);\r\n\t\t} else setErrorMessage(e.message);\r\n\t}\r\n};\r\n\r\nexport const fetchMyCollection = async (myCollection, setMyCollection, setErrorMessage) => {\r\n\tconsole.log(`trying to fetch my collection...`);\r\n\tconsole.log(`${URL}/collection`);\r\n\ttry {\r\n\t\tconst response = await axios({\r\n\t\t\tmethod: \"GET\",\r\n\t\t\turl: `${URL}/collection`,\r\n\t\t\theaders: { \"Content-Type\": \"application/json\" },\r\n\t\t});\r\n\t\tconst fetchedCollection = response.data;\r\n\t\tconsole.log(\"Fetched collection...\");\r\n\t\tconsole.log(response.data);\r\n\t\tsetMyCollection([...fetchedCollection]);\r\n\t} catch (e) {\r\n\t\tconsole.log(e);\r\n\t\tif (typeof e.response.data === \"string\") {\r\n\t\t\tsetErrorMessage(e.response.data);\r\n\t\t} else if (typeof e.response.data.message === \"string\") {\r\n\t\t\tsetErrorMessage(e.response.data.message);\r\n\t\t} else setErrorMessage(e.message);\r\n\t}\r\n};\r\n\r\nexport const releaseFromCollection = async (pokemonId, setMyCollection, setErrorMessage) => {\r\n\tconsole.log(`trying to release pokemon id: ${pokemonId} from collection...`);\r\n\tconsole.log(`${URL}/collection/${pokemonId}`);\r\n\ttry {\r\n\t\tconst response = await axios({\r\n\t\t\tmethod: \"DELETE\",\r\n\t\t\turl: `${URL}/collection/${pokemonId}`,\r\n\t\t\theaders: { \"Content-Type\": \"application/json\" },\r\n\t\t});\r\n\r\n\t\tconst fetchedCollection = response.data;\r\n\t\tconsole.log(response.data);\r\n\t\tsetMyCollection([...fetchedCollection]);\r\n\t} catch (e) {\r\n\t\tconsole.log(e);\r\n\t\tif (typeof e.response.data === \"string\") {\r\n\t\t\tsetErrorMessage(e.response.data);\r\n\t\t} else if (typeof e.response.data.message === \"string\") {\r\n\t\t\tsetErrorMessage(e.response.data.message);\r\n\t\t} else setErrorMessage(e.message);\r\n\t}\r\n};\r\n\r\nexport function capitalizeFirstLetter(string) {\r\n\treturn string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n","import React from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { fetchPokemonData } from \"../utils\";\r\n\r\nfunction PokemonsOfTypeGrid({\r\n\tpokemonsOfType,\r\n\tdata,\r\n\tsetData,\r\n\tsetErrorMessage,\r\n\tsetPokemonLoading,\r\n\ttypeGridLoading,\r\n}) {\r\n\tconst handleGridClick = (event) => {\r\n\t\tconst pokemonName = event.target.getAttribute(\"name\");\r\n\t\tfetchPokemonData(data, setData, pokemonName, setErrorMessage, setPokemonLoading);\r\n\t};\r\n\r\n\tif (typeGridLoading) {\r\n\t\treturn <Loader type=\"MutatingDots\" color=\"#00BFFF\" height={100} width={100} />;\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<div className=\"grid-container\">\r\n\t\t\t\t{pokemonsOfType.map((pokemon, i) => {\r\n\t\t\t\t\tif (!pokemon || !pokemon.sprites) return null;\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div className=\"card text-white bg-secondary\" key={`type-grid-pokemon-${i}`}>\r\n\t\t\t\t\t\t\t<span className=\"card-header\">{pokemon.name}</span>\r\n\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\tsrc={pokemon.sprites[\"front_default\"]}\r\n\t\t\t\t\t\t\t\talt=\"pokemon\"\r\n\t\t\t\t\t\t\t\tonMouseEnter={(event) => (event.target.src = pokemon.sprites[\"back_default\"])}\r\n\t\t\t\t\t\t\t\tonMouseLeave={(event) => (event.target.src = pokemon.sprites[\"front_default\"])}\r\n\t\t\t\t\t\t\t\tname={pokemon.name}\r\n\t\t\t\t\t\t\t\tonClick={handleGridClick}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default PokemonsOfTypeGrid;\r\n","import React, { useEffect } from \"react\";\r\nimport { fetchPokemonTypes, capitalizeFirstLetter } from \"../utils.js\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nfunction Pokemon({\r\n\tpokemonData,\r\n\tsetPokemonsOfType,\r\n\tisFetching,\r\n\tsetErrorMessage,\r\n\tpokemonLoading,\r\n\tsetTypeGridLoading,\r\n}) {\r\n\tconst handleTypeClick = (event) => {\r\n\t\tconst type = event.target.getAttribute(\"type\");\r\n\t\tconsole.log(\"type clicked\", type);\r\n\t\ttry {\r\n\t\t\tfetchPokemonTypes(type, setPokemonsOfType, setErrorMessage, setTypeGridLoading);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"caught\");\r\n\t\t\tsetPokemonsOfType([]);\r\n\t\t}\r\n\t};\r\n\r\n\tconst pokemonDataDivs = [];\r\n\tfor (const key in pokemonData) {\r\n\t\tif (key === \"sprites\" || key === \"id\") continue;\r\n\r\n\t\tif (Array.isArray(pokemonData[key]) && key === \"types\") {\r\n\t\t\tpokemonDataDivs.push(\r\n\t\t\t\t<div key={key} className=\"pokemon-data-div\">\r\n\t\t\t\t\t<span>{`${capitalizeFirstLetter(key)}: `}</span>\r\n\t\t\t\t\t{pokemonData[key].map((type, i) => {\r\n\t\t\t\t\t\tif (pokemonData[key].length - 1 === i) {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-outline-primary\"\r\n\t\t\t\t\t\t\t\t\tkey={`type-${i}`}\r\n\t\t\t\t\t\t\t\t\ttype={type}\r\n\t\t\t\t\t\t\t\t\tonClick={handleTypeClick}\r\n\t\t\t\t\t\t\t\t>{`${type}`}</span>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t/* can add something to all spans which aren't the last one (like a comma) */\r\n\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\tclassName=\"btn btn-outline-primary\"\r\n\t\t\t\t\t\t\t\tkey={`type-${i}`}\r\n\t\t\t\t\t\t\t\ttype={type}\r\n\t\t\t\t\t\t\t\tonClick={handleTypeClick}\r\n\t\t\t\t\t\t\t>{`${type}`}</span>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tpokemonDataDivs.push(\r\n\t\t\t<div key={key} className=\"pokemon-data-div\">\r\n\t\t\t\t<span>{`${capitalizeFirstLetter(key)}: `}</span>\r\n\t\t\t\t<span>{pokemonData[key]}</span>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\tif (pokemonLoading) {\r\n\t\treturn <Loader type=\"MutatingDots\" color=\"#00BFFF\" height={`100%`} width={100} />;\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"pokemon-data-except-big-artwork\">\r\n\t\t\t\t\t<div>{pokemonDataDivs}</div>\r\n\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tsrc={pokemonData.sprites[\"front_default\"]}\r\n\t\t\t\t\t\talt=\"pokemon\"\r\n\t\t\t\t\t\tonMouseEnter={(event) => (event.target.src = pokemonData.sprites[\"back_default\"])}\r\n\t\t\t\t\t\tonMouseLeave={(event) => (event.target.src = pokemonData.sprites[\"front_default\"])}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<img\r\n\t\t\t\t\tclassName=\"big-artwork\"\r\n\t\t\t\t\tsrc={pokemonData.sprites.other.dream_world[\"front_default\"]}\r\n\t\t\t\t\talt=\"pokemon-banner\"\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Pokemon;\r\n","import React from \"react\";\r\n\r\nconst Suggestions = ({ suggestions, setInputValue, handleSearchButtonClick }) => {\r\n\tconst handleSuggestionClick = (event) => {\r\n\t\tsetInputValue(event.target.innerText);\r\n\t\thandleSearchButtonClick();\r\n\t};\r\n\r\n\tconst options = suggestions.map((suggestion, i) => (\r\n\t\t<div className=\"suggestion\" key={`suggestion-${i}`} onClick={handleSuggestionClick}>\r\n\t\t\t{suggestion}\r\n\t\t</div>\r\n\t));\r\n\treturn <div className=\"suggestions\">{options}</div>;\r\n};\r\n\r\nexport default Suggestions;\r\n","import React from \"react\";\r\nimport Pokemon from \"../components/Pokemon\";\r\nimport Suggestions from \"../components/Suggestions\";\r\n\r\nfunction PokemonSection({\r\n\tdata,\r\n\tsetData,\r\n\tinputValue,\r\n\thandleInputChange,\r\n\tsearchSuggestions,\r\n\tsearchButtonClickCount,\r\n\tsetSearchButtonClickCount,\r\n\tsetInputValue,\r\n\tpokemonsOfType,\r\n\tsetPokemonsOfType,\r\n\tsetErrorMessage,\r\n\tsetTypeGridLoading,\r\n\tpokemonLoading,\r\n}) {\r\n\tconst handleSearchButtonClick = () => {\r\n\t\tsetSearchButtonClickCount(searchButtonClickCount + 1);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<section className=\"pokemon-section\">\r\n\t\t\t<h1 className=\"main-header\">Pokedex</h1>\r\n\t\t\t<div className=\"autocomplete\">\r\n\t\t\t\t<input\r\n\t\t\t\t\tid=\"search-input\"\r\n\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\tplaceholder=\"pikachu...\"\r\n\t\t\t\t\tvalue={inputValue}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<button id=\"search-button\" onClick={handleSearchButtonClick}>\r\n\t\t\t\t\t🔍\r\n\t\t\t\t</button>\r\n\r\n\t\t\t\t<Suggestions\r\n\t\t\t\t\tid=\"search-suggestions\"\r\n\t\t\t\t\tsuggestions={searchSuggestions}\r\n\t\t\t\t\tsetInputValue={setInputValue}\r\n\t\t\t\t\thandleSearchButtonClick={handleSearchButtonClick}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\r\n\t\t\t<Pokemon\r\n\t\t\t\tpokemonData={data.pokemonData}\r\n\t\t\t\tisFetching={data.isFetching}\r\n\t\t\t\tsetPokemonData={setData}\r\n\t\t\t\tpokemonsOfType={pokemonsOfType}\r\n\t\t\t\tsetPokemonsOfType={setPokemonsOfType}\r\n\t\t\t\tsetErrorMessage={setErrorMessage}\r\n\t\t\t\tsetTypeGridLoading={setTypeGridLoading}\r\n\t\t\t\tpokemonLoading={pokemonLoading}\r\n\t\t\t/>\r\n\t\t</section>\r\n\t);\r\n}\r\n\r\nexport default PokemonSection;\r\n","import React from \"react\";\r\nimport { catchPokemon, fetchMyCollection, releaseFromCollection, fetchPokemonData } from \"../utils\";\r\nimport { useEffect, useRef } from \"react\";\r\n\r\nfunction CollectionSection({\r\n\tdata,\r\n\tsetData,\r\n\tmyCollection,\r\n\tsetMyCollection,\r\n\tsetErrorMessage,\r\n\tisCollectionDisplayed,\r\n\tsetIscollectionDisplayed,\r\n\tsetPokemonLoading,\r\n}) {\r\n\tconst viewCollectionButton = useRef(null);\r\n\r\n\tconst myCollectionDisplay = useRef(null);\r\n\r\n\tuseEffect(() => {\r\n\t\tfetchMyCollection(myCollection, setMyCollection, setErrorMessage);\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isCollectionDisplayed) {\r\n\t\t\tmyCollectionDisplay.current.style.display = \"grid\";\r\n\t\t\tviewCollectionButton.current.innerText = \"Hide My Collection\";\r\n\t\t} else {\r\n\t\t\tmyCollectionDisplay.current.style.display = \"none\";\r\n\t\t\tviewCollectionButton.current.innerText = \"View My Collection\";\r\n\t\t}\r\n\t}, [isCollectionDisplayed]);\r\n\r\n\tconst pokemonData = data.pokemonData;\r\n\r\n\tconst handleCatch = (event) => {\r\n\t\tconsole.log(pokemonData);\r\n\t\tcatchPokemon(pokemonData, myCollection, setMyCollection, setErrorMessage);\r\n\t\tsetIscollectionDisplayed(true);\r\n\t};\r\n\r\n\tconst handleViewCollection = (event) => {\r\n\t\tconsole.log(myCollection);\r\n\t\tsetIscollectionDisplayed(!isCollectionDisplayed);\r\n\t};\r\n\r\n\tconst handleRelease = (event) => {\r\n\t\tconst pokemonId = event.target.getAttribute(\"pokemonid\");\r\n\t\tconsole.log(pokemonId);\r\n\t\treleaseFromCollection(pokemonId, setMyCollection, setErrorMessage);\r\n\t};\r\n\r\n\tconst handleCollectionPokemonClick = (event) => {\r\n\t\tconst pokemonName = event.target.getAttribute(\"name\");\r\n\t\tfetchPokemonData(data, setData, pokemonName, setErrorMessage, setPokemonLoading);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"collection-section\">\r\n\t\t\t<div ref={myCollectionDisplay} className=\"my-collection\">\r\n\t\t\t\t{myCollection.map((pokemon, i) => (\r\n\t\t\t\t\t<div className=\"card text-white bg-primary\" key={`collection-pokemon-${i}`}>\r\n\t\t\t\t\t\t<span className=\"card-header\">{pokemon.name}</span>\r\n\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\tsrc={pokemon.sprites[\"front_default\"]}\r\n\t\t\t\t\t\t\talt=\"pokemon\"\r\n\t\t\t\t\t\t\tonMouseEnter={(event) => (event.target.src = pokemon.sprites[\"back_default\"])}\r\n\t\t\t\t\t\t\tonMouseLeave={(event) => (event.target.src = pokemon.sprites[\"front_default\"])}\r\n\t\t\t\t\t\t\tname={pokemon.name}\r\n\t\t\t\t\t\t\tonClick={handleCollectionPokemonClick}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<button className=\"btn btn-warning\" pokemonid={pokemon.id} onClick={handleRelease}>\r\n\t\t\t\t\t\t\tRelease\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t\t<button ref={viewCollectionButton} className=\"btn btn-primary\" onClick={handleViewCollection}>\r\n\t\t\t\tView My Collection\r\n\t\t\t</button>\r\n\t\t\t<button className=\"btn btn-primary\" onClick={handleCatch}>\r\n\t\t\t\t{`Catch ${data.pokemonData.name}!`}\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CollectionSection;\r\n","import \"./styles/App.css\";\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { fetchPokemonData, fetchPokemonNames } from \"./utils.js\";\r\n\r\nimport PokemonsOfTypeGrid from \"./components/PokemonsOfTypeGrid\";\r\nimport PokemonSection from \"./components/PokemonSection\";\r\nimport CollectionSection from \"./components/CollectionSection\";\r\n\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nfunction App() {\r\n\tconst mockPokemonData = {\r\n\t\tid: null,\r\n\t\tname: \"\",\r\n\t\theight: null,\r\n\t\tweight: null,\r\n\t\ttypes: [],\r\n\t\tsprites: {\r\n\t\t\tother: {\r\n\t\t\t\tdream_world: {},\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n\tconst [pokemonLoading, setPokemonLoading] = useState(true);\r\n\tconst [typeGridLoading, setTypeGridLoading] = useState(false);\r\n\r\n\tconst [isCollectionDisplayed, setIscollectionDisplayed] = useState(false);\r\n\tconst [errorMessage, setErrorMessage] = useState(\"\");\r\n\tconst [searchSuggestions, setSearchSuggestions] = useState([]);\r\n\tconst [allPokemonNames, setAllPokemonNames] = useState([]);\r\n\tconst [inputValue, setInputValue] = useState(\"pikachu\");\r\n\tconst [searchButtonClickCount, setSearchButtonClickCount] = useState(0);\r\n\tconst [data, setData] = useState({\r\n\t\tpokemonData: mockPokemonData,\r\n\t\tisFetching: false,\r\n\t});\r\n\tconst [pokemonsOfType, setPokemonsOfType] = useState([]);\r\n\tconst [myCollection, setMyCollection] = useState([]);\r\n\r\n\tconst errorDiv = useRef(null);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (errorMessage === \"\") {\r\n\t\t\terrorDiv.current.style.display = \"none\";\r\n\t\t} else {\r\n\t\t\terrorDiv.current.style.display = \"block\";\r\n\t\t}\r\n\t}, [errorMessage]);\r\n\r\n\tuseEffect(() => {\r\n\t\tfetchPokemonNames(setAllPokemonNames, `limit=800`, setErrorMessage);\r\n\r\n\t\t/* Event listener for closing suggestion list when clicking anywhere, and resetting error message */\r\n\t\twindow.addEventListener(\"click\", function (event) {\r\n\t\t\tdocument.querySelector(\".suggestions\").style.display = \"none\";\r\n\t\t\tsetErrorMessage(\"\");\r\n\t\t});\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tfetchPokemonData(data, setData, inputValue, setErrorMessage, setPokemonLoading);\r\n\t}, [searchButtonClickCount]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log(\"input: \", inputValue);\r\n\t\tconst searchSuggestions = allPokemonNames.filter((pokemonName) =>\r\n\t\t\tpokemonName.includes(inputValue)\r\n\t\t);\r\n\t\tsetSearchSuggestions(searchSuggestions);\r\n\t}, [inputValue]);\r\n\r\n\tconst handleInputChange = (event) => {\r\n\t\tsetInputValue(event.target.value);\r\n\t\t/* If suggestions are not displayed, display them when typing in the input */\r\n\t\tdocument.querySelector(\".suggestions\").style.display = \"block\";\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<div className=\"pokemon-and-collection\">\r\n\t\t\t\t<PokemonSection\r\n\t\t\t\t\tdata={data}\r\n\t\t\t\t\tsetData={setData}\r\n\t\t\t\t\tinputValue={inputValue}\r\n\t\t\t\t\thandleInputChange={handleInputChange}\r\n\t\t\t\t\tsearchSuggestions={searchSuggestions}\r\n\t\t\t\t\tsearchButtonClickCount={searchButtonClickCount}\r\n\t\t\t\t\tsetSearchButtonClickCount={setSearchButtonClickCount}\r\n\t\t\t\t\tsetInputValue={setInputValue}\r\n\t\t\t\t\tpokemonsOfType={pokemonsOfType}\r\n\t\t\t\t\tsetPokemonsOfType={setPokemonsOfType}\r\n\t\t\t\t\tsetErrorMessage={setErrorMessage}\r\n\t\t\t\t\tsetTypeGridLoading={setTypeGridLoading}\r\n\t\t\t\t\tpokemonLoading={pokemonLoading}\r\n\t\t\t\t/>\r\n\t\t\t\t<CollectionSection\r\n\t\t\t\t\tdata={data}\r\n\t\t\t\t\tsetData={setData}\r\n\t\t\t\t\tmyCollection={myCollection}\r\n\t\t\t\t\tsetMyCollection={setMyCollection}\r\n\t\t\t\t\tsetErrorMessage={setErrorMessage}\r\n\t\t\t\t\tisCollectionDisplayed={isCollectionDisplayed}\r\n\t\t\t\t\tsetIscollectionDisplayed={setIscollectionDisplayed}\r\n\t\t\t\t\tsetPokemonLoading={setPokemonLoading}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div ref={errorDiv} className=\"alert alert-danger alert-dismissible fade show\">\r\n\t\t\t\t{errorMessage}\r\n\t\t\t</div>\r\n\r\n\t\t\t<PokemonsOfTypeGrid\r\n\t\t\t\tpokemonsOfType={pokemonsOfType}\r\n\t\t\t\tdata={data}\r\n\t\t\t\ttypeGridLoading={typeGridLoading}\r\n\t\t\t\tsetData={setData}\r\n\t\t\t\tsetErrorMessage={setErrorMessage}\r\n\t\t\t\tsetPokemonLoading={setPokemonLoading}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\r\n\t\timport(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n\t\t\tgetCLS(onPerfEntry);\r\n\t\t\tgetFID(onPerfEntry);\r\n\t\t\tgetFCP(onPerfEntry);\r\n\t\t\tgetLCP(onPerfEntry);\r\n\t\t\tgetTTFB(onPerfEntry);\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}